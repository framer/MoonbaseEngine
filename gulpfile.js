// Generated by CoffeeScript 1.10.0
(function() {
  var Highlights, _, buildPath, changed, config, context, data, del, e, emptytask, error, execSync, express, filesInDir, fs, getTotalSizeForFileType, gulp, gulpif, gulpnunjucks, gutil, highlighter, imagemin, imageminOptions, isDirectory, join, livereload, lr, markdown, marked, md5, merge, minifycss, named, newy, nunjucks, nunjucksDate, nunjucksPipe, paths, plumber, portfinder, projectPath, sass, sourcemaps, spritesmith, st, watch, webpack, webpackConfig, webpackConfigCoffeeScript, webpackConfigJavaScript, webpackConfigPlugins, workingPath;

  _ = require("lodash");

  join = require("path").join;

  fs = require("fs-extra");

  execSync = require("child_process").execSync;

  gulp = require("gulp");

  gutil = require("gulp-util");

  gulpnunjucks = require("gulp-nunjucks-html");

  nunjucksDate = require("nunjucks-date");

  livereload = require("gulp-livereload");

  sass = require("gulp-sass");

  changed = require("gulp-changed");

  watch = require("gulp-watch");

  webpack = require("webpack-stream");

  plumber = require("gulp-plumber");

  merge = require("merge-stream");

  gulpif = require("gulp-if");

  minifycss = require("gulp-minify-css");

  sourcemaps = require("gulp-sourcemaps");

  emptytask = require("gulp-empty");

  data = require("gulp-data");

  newy = require("./vendor/newy");

  del = require("del");

  spritesmith = require("gulp.spritesmith");

  imagemin = require("imagemin-pngquant");

  md5 = require("gulp-md5-assets");

  lr = require("connect-livereload");

  st = require("st");

  portfinder = require("portfinder");

  express = require("express");

  markdown = require("nunjucks-markdown");

  marked = require("marked");

  Highlights = require("highlights");

  imagemin = require("imagemin-pngquant");

  named = require("vinyl-named");

  workingPath = process.cwd();

  paths = {
    build: ".build",
    templates: "templates",
    pages: "pages",
    "static": "assets/static",
    scss: "assets/css",
    javascript: "assets/scripts",
    coffeescript: "assets/scripts",
    sprites: "assets/sprites"
  };

  projectPath = function(path, fileTypes) {
    if (path == null) {
      path = "";
    }
    if (fileTypes == null) {
      fileTypes = "";
    }
    return join(workingPath, path, fileTypes);
  };

  buildPath = function(path, fileTypes) {
    if (path == null) {
      path = "";
    }
    if (fileTypes == null) {
      fileTypes = "";
    }
    return join(workingPath, paths.build, path, fileTypes);
  };

  isDirectory = function(path) {
    var e, error;
    try {
      return fs.lstatSync(path).isDirectory();
    } catch (error) {
      e = error;
      return false;
    }
  };

  filesInDir = function(path, ext) {
    if (!fs.existsSync(path)) {
      return [];
    }
    return fs.readdirSync(path).filter(function(fileName) {
      return _.endsWith(fileName, ext);
    });
  };

  try {
    config = require(join(process.cwd(), "config"));
    config = config[_.first(_.keys(config))];
  } catch (error) {
    e = error;
    config = {};
  }

  highlighter = new Highlights();

  marked.setOptions({
    highlight: function(code, language) {
      return highlighter.highlightSync({
        fileContents: code,
        scopeName: language
      });
    }
  });

  nunjucksDate.setDefaultFormat("MMMM Do YYYY, h:mm:ss a");

  nunjucks = {};

  nunjucksPipe = function() {
    return gulpnunjucks({
      searchPaths: projectPath(paths.templates),
      setUp: function(env) {
        markdown.register(env, marked);
        nunjucksDate.install(env);
        nunjucks.env = env;
        return env;
      }
    });
  };

  webpackConfig = {
    module: {
      loaders: [
        {
          test: /\.coffee$/,
          loader: "coffee-loader"
        }
      ]
    },
    resolve: {
      extensions: ["", ".coffee", ".js"]
    },
    resolveLoader: {
      root: join(__dirname, "node_modules")
    },
    output: {
      filename: "[name].js"
    },
    cache: true,
    quiet: true,
    watch: false,
    devtool: "sourcemap"
  };

  webpackConfigPlugins = [new webpack.webpack.optimize.DedupePlugin(), new webpack.webpack.optimize.UglifyJsPlugin()];

  webpackConfigJavaScript = _.cloneDeep(webpackConfig);

  webpackConfigJavaScript.output.filename = "[name].js";

  webpackConfigJavaScript.plugins = webpackConfigPlugins;

  webpackConfigCoffeeScript = _.cloneDeep(webpackConfig);

  webpackConfigCoffeeScript.output.filename = "[name].coffee.js";

  webpackConfigCoffeeScript.plugins = webpackConfigPlugins;

  imageminOptions = {
    quality: process.env.MOONBASE_IMAGEMIN_QUALITY || "65-80",
    speed: process.env.MOONBASE_IMAGEMIN_SPEED || 4
  };

  getTotalSizeForFileType = function(path, ext) {
    return execSync("find " + path + " -type f -name '*." + ext + "' -exec du -ch {} + | grep total").toString().replace(/^\s+|\s+$/g, "").split(/\s/)[0];
  };

  context = {
    nunjucks: nunjucks
  };

  gulp.task("static", function() {
    return gulp.src(projectPath(paths["static"], "**/*.*")).pipe(changed(buildPath(paths["static"]))).pipe(gulp.dest(buildPath(paths["static"]))).pipe(livereload());
  });

  gulp.task("pages", function() {
    if (typeof config.before === "function") {
      config.before(context);
    }
    return gulp.src(projectPath(paths.pages, "**/*")).pipe(plumber()).pipe(data(function(file) {
      return typeof config.page === "function" ? config.page(file.path.replace(projectPath(paths.pages), ""), file, context) : void 0;
    })).pipe(nunjucksPipe()).pipe(gulp.dest(buildPath())).pipe(livereload());
  });

  gulp.task("scss", ["sprites"], function() {
    return gulp.src(projectPath(paths.scss, "*.scss")).pipe(plumber()).pipe(sass().on("error", sass.logError)).pipe(gulp.dest(buildPath(paths.scss))).pipe(livereload());
  });

  gulp.task("coffeescript", function() {
    if (!filesInDir(projectPath(paths.coffeescript), ".coffee").length) {
      return emptytask;
    }
    return gulp.src(projectPath(paths.coffeescript, "*.coffee")).pipe(plumber()).pipe(named()).pipe(webpack(webpackConfigCoffeeScript)).pipe(gulp.dest(buildPath(paths.coffeescript))).pipe(livereload());
  });

  gulp.task("javascript", function() {
    if (!filesInDir(projectPath(paths.javascript), ".js").length) {
      return emptytask;
    }
    return gulp.src(projectPath(paths.javascript, "*.js")).pipe(plumber()).pipe(named()).pipe(webpack(webpackConfigJavaScript)).pipe(gulp.dest(buildPath(paths.javascript))).pipe(livereload());
  });

  gulp.task("sprites", function() {
    var sprites;
    if (!isDirectory(projectPath(paths.sprites))) {
      return emptytask;
    }
    sprites = fs.readdirSync(projectPath(paths.sprites)).filter(function(fileName) {
      return isDirectory(join(projectPath(paths.sprites), fileName));
    });
    if (!(sprites.length > 0)) {
      return emptytask;
    }
    return merge(sprites.map(function(fileName) {
      var cssStream, imgStream, spriteData, spriteImagesPath, spriteImagesPath2x, spriteOutputPath;
      spriteImagesPath = projectPath(paths.sprites, fileName + "/*.png");
      spriteImagesPath2x = projectPath(paths.sprites, fileName + "/*@2x.png");
      spriteOutputPath = buildPath(paths.sprites, fileName + ".png");
      spriteData = gulp.src(spriteImagesPath).pipe(plumber()).pipe(spritesmith({
        retinaSrcFilter: [spriteImagesPath2x],
        imgName: fileName + ".png",
        retinaImgName: "../sprites/" + fileName + "@2x.png",
        cssName: fileName + ".scss",
        imgPath: "../sprites/" + fileName + ".png",
        retinaImgPath: "../sprites/" + fileName + "@2x.png"
      }));
      imgStream = spriteData.img.pipe(gulp.dest(buildPath(paths.sprites)));
      cssStream = spriteData.css.pipe(gulp.dest(projectPath(paths.sprites)));
      return merge(imgStream, cssStream).pipe(livereload());
    }));
  });

  gulp.task("imagemin", function() {
    return gulp.src(projectPath(paths["static"], "**/*.png")).pipe(plumber()).pipe(imagemin(imageminOptions)()).pipe(gulp.dest(projectPath(paths["static"])));
  });

  gulp.task("md5", ["build"], function() {
    return gulp.src(buildPath("", "**/*.{css, js}")).pipe(md5(10, buildPath("", "**/*.html"))).pipe(gulp.dest(buildPath("")));
  });

  gulp.task("watch", ["build"], function(cb) {
    watch([projectPath(paths.pages, "**/*.html"), projectPath(paths.pages, "**/*.md"), projectPath(paths.templates, "**/*.html"), projectPath(paths.templates, "**/*.md")], function(err, events) {
      return gulp.start("pages");
    });
    watch([projectPath(paths["static"], "**/*.*")], function(err, events) {
      return gulp.start("static");
    });
    watch([projectPath(paths.scss, "**/*.scss")], function(err, events) {
      return gulp.start("scss");
    });
    watch([projectPath(paths.coffeescript, "**/*.coffee")], function(err, events) {
      return gulp.start("coffeescript");
    });
    watch([projectPath(paths.javascript, "**/*.js")], function(err, events) {
      return gulp.start("javascript");
    });
    watch([projectPath(paths.sprites, "*/*.png")], function(err, events) {
      return gulp.start("scss");
    });
    return gulp.start("server", cb);
  });

  gulp.task("server", function(cb) {
    return portfinder.getPort(function(err, serverPort) {
      portfinder.basePort = 10000;
      return portfinder.getPort(function(err, livereloadPort) {
        var app;
        app = express();
        app.use(lr({
          port: livereloadPort
        }));
        app.use(express["static"](buildPath()));
        app.listen(serverPort);
        livereload.listen({
          port: livereloadPort,
          basePath: buildPath()
        });
        gutil.log(gutil.colors.green("Serving at: http://localhost:" + serverPort));
        gutil.log(gutil.colors.green("From path:  " + (buildPath())));
        return cb(err);
      });
    });
  });

  gulp.task("report", function() {
    var ext, i, len, ref, results;
    ref = ["html", "css", "jpg", "png", "mp4", "ico"];
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      ext = ref[i];
      results.push(gutil.log(gutil.colors.green(ext + " " + (getTotalSizeForFileType(buildPath(paths.assets), ext)))));
    }
    return results;
  });

  gulp.task("clean", function() {
    return del([buildPath(), projectPath(paths.sprites, "*.scss")]);
  });

  gulp.task("build", ["pages", "static", "scss", "coffeescript", "javascript"]);

  gulp.task("default", ["server"]);

}).call(this);
